diff -ruN linux-5.9.1/kernel/sys.c my-linux-5.9.1/kernel/sys.c
--- linux-5.9.1/kernel/sys.c    2020-10-17 06:31:22.000000000 +0000
+++ my-linux-5.9.1/kernel/sys.c 2020-10-27 10:25:56.505443103 +0000
@@ -4,7 +4,7 @@
  *
  *  Copyright (C) 1991, 1992  Linus Torvalds
  */
-
+#include <linux/list.h>
 #include <linux/export.h>
 #include <linux/mm.h>
 #include <linux/utsname.h>
@@ -2695,3 +2695,77 @@
        return 0;
 }
 #endif /* CONFIG_COMPAT */
+
+SYSCALL_DEFINE2(sh_task_info, long, pid, char *, filename)
+{
+       // check pid range
+       if(pid < 1 || pid > 2147483647)
+       {
+               printk(KERN_ALERT "Invalid value of PID.\n");
+               return -EINVAL;
+       }
+
+       struct file *f;
+       const int BUF_SIZE = 400;
+       char path[BUF_SIZE], buf[2000];
+       int i = 0;
+       int res;
+
+       // initialize char arrays
+       for(; i < BUF_SIZE; i++)
+       {
+               path[i] = 0;
+               buf[i] = 0;
+       }
+       for(; i < 2000; i++)
+       {
+               buf[i] = 0;
+       }
+
+       long copied = strncpy_from_user(path, filename, sizeof(path));             // copy data from userspace to kernel space
+       struct task_struct *task = pid_task(find_vpid(pid), PIDTYPE_PID);  // get task corresponding to pid
+
+       printk(KERN_INFO "Syscall loaded.\n");
+       f = filp_open(path, O_WRONLY|O_CREAT, 0);               // open the file
+       if(f == NULL)
+       {
+               printk(KERN_ALERT "Error in opening the file.\n");
+               return -1;
+       }
+       if(copied < 0)
+       {
+               printk(KERN_ALERT "Error in copying data from userspace.\n");
+               return -1;
+       }
+
+       // copy task_struct details to buf
+       int len = 0;
+       len = snprintf(buf, 2000, "Process: %s\nPID: %ld\nProcess State: %ld\nPriority: %ld\nParent Process PID: %ld\n", task->comm, (long)task->pid, (long)task->state, (long)task->prio, (long)task->parent->pid);
+
+       if(copied < 0)
+       {
+               printk(KERN_ALERT "Error in sprintf().\n");
+               return -1;
+       }
+
+       struct task_struct *child;
+       struct list_head *list;
+       i = 1;
+       list_for_each(list, &((*task).children))
+       {
+               child = list_entry(list, struct task_struct, sibling);
+               len += snprintf(buf + strlen(buf), 2000, "Child Process %d PID: %ld\n", i, (long)child->pid);
+               i++;
+       }
+
+       printk(KERN_INFO "%s",buf);                               // print buf to kernel logs
+       res = kernel_write(f, buf, len, &f->f_pos);               // write buf to file
+       if(res < 0)
+       {
+               printk(KERN_ALERT "Error in writing to the file.\n");
+               return -1;
+       }
+       filp_close(f, NULL);                     // close the file
+
+       return 0;
+}
\ No newline at end of file

diff -ruN linux-5.9.1/arch/x86/entry/syscalls/syscall_64.tbl my-linux-5.9.1/arch/x86/entry/syscalls/syscall_64.tbl
--- linux-5.9.1/arch/x86/entry/syscalls/syscall_64.tbl  2020-10-17 06:31:22.000000000 +0000
+++ my-linux-5.9.1/arch/x86/entry/syscalls/syscall_64.tbl       2020-10-26 12:59:03.083960103 +0000
@@ -361,6 +361,7 @@
 437    common  openat2                 sys_openat2
 438    common  pidfd_getfd             sys_pidfd_getfd
 439    common  faccessat2              sys_faccessat2
+440    common  sh_task_info            sys_sh_task_info
 
 #
 # x32-specific system call numbers start at 512 to avoid cache impact
